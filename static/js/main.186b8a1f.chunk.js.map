{"version":3,"sources":["hoc/layout/Layout.js","containers/home/home.js","components/product-view/productInGrid.js","containers/product-grid/productGrid.js","core/services/product-services.js","App.js","serviceWorker.js","store/reducers/auth.js","index.js"],"names":["Layout","Fragment","className","to","exact","activeClassName","this","props","children","Component","home","ProductInGrid","src","data","imagePath","name","price","ProductGrid","useState","pagedProducts","setProducts","loading","setLoading","useEffect","axios","post","baseUrl","then","result","finally","list","items","length","map","product","key","id","App","routes","path","component","productGrid","isAuthenticated","Boolean","window","location","hostname","match","initialState","token","userId","error","authRedirectPath","reducer","state","action","type","rootReducer","combineReducers","auth","authReducer","store","createStore","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTA2CeA,G,uLAlCP,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,QAAf,QAKA,6BACI,wBAAIA,UAAU,mBACV,wBAAIA,UAAU,kBACV,kBAAC,IAAD,CACIC,GAAG,IACHC,OAAO,EACPC,gBAAgB,UAHpB,SAKJ,wBAAIH,UAAU,kBACV,kBAAC,IAAD,CACIC,GAAG,YACHC,OAAO,EACPC,gBAAgB,UAHpB,gBAQhB,0BAAMH,UAAU,WACXI,KAAKC,MAAMC,e,GA9BXC,cCKNC,EARF,WACT,OACI,iD,mCCaOC,EAdO,SAACJ,GAEnB,OACI,yBAAKL,UAAU,+BACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,mBAAmBU,IAAKL,EAAMM,KAAKC,WAAa,wBAC/D,yBAAKZ,UAAU,qBAAqBK,EAAMM,KAAKE,MAC/C,yBAAKb,UAAU,sBAAsBK,EAAMM,KAAKG,U,MCoCjDC,MAzCf,WAAwB,IAAD,EAIkBC,mBAAS,IAJ3B,mBAIZC,EAJY,KAIGC,EAJH,OAKWF,oBAAS,GALpB,mBAKZG,EALY,KAKHC,EALG,KAOnBC,qBAAU,WACND,GAAW,GCTRE,IAAMC,KAAKC,6CAA0B,IDWvCC,MAAK,SAACC,GACHR,EAAYQ,EAAOf,SACpBgB,QAAQP,GAAW,MACvB,IAEH,IAAIQ,EAAO,KAYX,OAVIA,EADDT,EACS,0CACHF,EAAcY,OAASZ,EAAcY,MAAMC,OAAS,EACjDb,EAAcY,MAAME,KAAI,SAACC,GAC7B,OACI,kBAAC,EAAD,CAAeC,IAAKD,EAAQE,GAAIvB,KAAMqB,OAItC,gDAGR,6BACI,yBAAKhC,UAAU,gBACX,kDAIJ,yBAAKA,UAAU,gBACV4B,KEHFO,MA/Bf,SAAa9B,GACX,IAAI+B,EACF,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOC,KAAK,IAAInC,OAAK,EAACoC,UAAW9B,IACjC,kBAAC,IAAD,CAAO6B,KAAK,YAAYnC,OAAK,EAACoC,UAAWC,IACzC,kBAAC,IAAD,CAAUtC,GAAG,OAgBjB,OAZKI,EAAMmC,kBACTJ,EACE,kBAAC,IAAD,KAME,kBAAC,IAAD,CAAUnC,GAAG,QAKjB,6BACE,kBAAC,EAAD,KACGmC,KCnBWK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBChBAC,G,MAAe,CACjBC,MAAO,KACPC,OAAQ,KACRC,MAAO,KACP9B,SAAS,EACT+B,iBAAkB,MAmBPC,EATC,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCAKjC,OAJLA,EAAOC,KAIKF,GCZlBG,EAAcC,YAAgB,CAChCC,KAAMC,IAWJC,EAAQC,YAAYL,GASpBM,EACF,kBAAC,IAAD,CAAUF,MAAOA,GACb,kBAAC,IAAD,KACI,kBAAC,EAAD,QAKZG,IAASC,OAAOF,EAAKG,SAASC,eAAe,SF4FvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.186b8a1f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom'\n// import classes from './Layout.css'; need web pack\nimport './Layout.css'\n\nclass Layout extends Component {\n\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"Toolbar\">\n                    <div className=\"Logo\">\n                        {/* <Logo /> */}\n                        LOGO\n                    </div>\n                    {/* must be componnet later */}\n                    <nav>\n                        <ul className=\"NavigationItems\">\n                            <li className=\"NavigationItem\">\n                                <NavLink\n                                    to='/'\n                                    exact={true}\n                                    activeClassName=\"active\">Home</NavLink>\n                            </li>\n                            <li className=\"NavigationItem\">\n                                <NavLink\n                                    to='/Products'\n                                    exact={true}\n                                    activeClassName=\"active\">Products</NavLink>\n                            </li>\n                        </ul>\n                    </nav>\n                </div>\n                <main className=\"Content\">\n                    {this.props.children}\n                </main>\n            </React.Fragment>\n        )\n    }\n}\n\n\nexport default Layout;","import React from 'react'\r\n\r\nconst home = () =>{\r\n    return (\r\n        <div>\r\n            hello from home\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default home;","import React from 'react'\r\nimport './productInGrid.css'\r\n\r\nconst ProductInGrid = (props) => {\r\n\r\n    return (\r\n        <div className=\"product-grid-item-container\">\r\n            <div className=\"product-grid-item\">\r\n                <img className=\"product-grid-img\" src={props.data.imagePath || '/images/default.png'} />\r\n                <div className=\"product-grid-name\">{props.data.name}</div>\r\n                <div className=\"product-grid-price\">{props.data.price}</div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ProductInGrid","import React, { useState, useEffect } from 'react'\r\nimport * as productService from '../../core/services/product-services'\r\nimport ProductInGrid from '../../components/product-view/productInGrid'\r\nimport './productGrid.css'\r\n\r\nfunction ProductGrid() {\r\n\r\n\r\n\r\n    const [pagedProducts, setProducts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        productService.search()\r\n        .then((result)=>{\r\n            setProducts(result.data);\r\n        }).finally(setLoading(false));\r\n    }, []);    \r\n    \r\n    let list = null;\r\n    if(loading){\r\n        list = (<div> spinner </div>)\r\n    }else if(pagedProducts.items && pagedProducts.items.length > 0){\r\n        list =  pagedProducts.items.map((product) => {\r\n            return (\r\n                <ProductInGrid key={product.id} data={product} />\r\n            );\r\n        })\r\n    }else{\r\n        list = (<div> nothing found </div>)\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"grid-sidebar\">\r\n                <div>\r\n                    filter goes here\r\n                </div>\r\n            </div>\r\n            <div className=\"grid-content\">\r\n                {list}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProductGrid;\r\n\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = 'http://185.2.14.80:8094/api';\r\nexport function search(){\r\n    return axios.post(baseUrl+'/Product/Search',{})\r\n}","import React from 'react';\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom';\nimport  Layout  from './hoc/layout/Layout'\nimport home from './containers/home/home'\nimport productGrid from './containers/product-grid/productGrid'\n\nfunction App(props) {\n  let routes = (\n    <Switch>\n      {/* <Route path=\"/car\" component={} />*/}\n      <Route path=\"/\" exact component={home} /> \n      <Route path=\"/Products\" exact component={productGrid} /> \n      <Redirect to=\"/\" />\n    </Switch>\n  );\n\n  if ( props.isAuthenticated ) {\n    routes = (\n      <Switch>\n        {/* <Route path=\"/checkout\" component={} />\n        <Route path=\"/orders\" component={} />\n        <Route path=\"/logout\" component={} />\n        <Route path=\"/auth\" component={} />\n        <Route path=\"/\" exact component={} /> */}\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  }\n  return (\n    <div>\n      <Layout>\n        {routes}\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n    token: null,\r\n    userId: null,\r\n    error: null,\r\n    loading: false,\r\n    authRedirectPath: '/'\r\n};\r\n\r\nconst authStart = (state, action) => {\r\n    return {\r\n        ...state,\r\n        ...{ error: null, loading: true }\r\n    };\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        //case actionTypes.AUTH_START: return authStart(state, action);\r\n        //...\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers } from 'redux';\nimport authReducer from './store/reducers/auth';\n\n\nconst rootReducer = combineReducers({\n    auth: authReducer\n});\n\n//const persistedState = loadState(); ali : if we want to load state from local storage s\n\n//const store = createStore(\n//  app,\n//  persistedState\n//);\n\n\nconst store = createStore(rootReducer);\n\n//ali : if we want to load state from local storage s\n//store.subscribe(() => {\n//    saveState({\n//      todos: store.getState().todos\n//    });\n//  });\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}